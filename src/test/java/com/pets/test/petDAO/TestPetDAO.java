package com.pets.test.petDAO;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.Date;
import java.util.List;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.annotation.Commit;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.annotation.DirtiesContext.ClassMode;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.ContextHierarchy;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.transaction.annotation.Transactional;

import com.pets.DAO.EnumeratedRepo;
import com.pets.DAO.PetRepo;
import com.pets.DTO.PetDTO;
import com.pets.exception.NotFoundException;
import com.pets.exception.UpdateException;
import com.pets.model.Pet;
import com.pets.model.PetStatus;
import com.pets.model.PetType;
import com.pets.test.util.Base64Conversion;

@ExtendWith(SpringExtension.class)
@ContextHierarchy({ @ContextConfiguration(locations = "classpath:applicationContext.xml"),
		@ContextConfiguration(locations = "classpath:dispatcherContext.xml") })
@WebAppConfiguration
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@TestInstance(TestInstance.Lifecycle.PER_CLASS) // lets us use before all as non static
@DirtiesContext(classMode = ClassMode.AFTER_CLASS) // clean up tables after
class TestPetDAO {
	// test image of one pixel, for brevity
	private static final String blobString = "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAIAAACQd1PeAAAADElEQVQImWP4//8/AAX+Av5Y8msOAAAAAElFTkSuQmCC";

	// variable for testing creation date immutability
	private Date created;

	@Autowired
	private EnumeratedRepo enumRepo;

	@Autowired
	private PetRepo petRepo;

	@BeforeAll
	@Transactional
	@Commit
	void enumerateTable() {
		PetType petType1 = enumRepo.createPetType("real");
		PetType petType2 = enumRepo.createPetType("digital");
		PetStatus petStatus1 = enumRepo.createPetStatus("unadopted");
		PetStatus petStatus2 = enumRepo.createPetStatus("adopted");

		assertNotEquals(petType1.getPet_type_id(), 0);
		assertNotEquals(petType2.getPet_type_id(), 0);
		assertNotEquals(petStatus1.getPet_status_id(), 0);
		assertNotEquals(petStatus2.getPet_status_id(), 0);
	}

	@Test
	@Transactional
	@Order(0)
	void testPetListEmpty() throws NotFoundException {
		List<Pet> petList = petRepo.getAllPets();
		//NOTHING should be in the list at the start
		assertEquals(petList.size(), 0);
	}

	@Test
	@Transactional
	@Order(1)
	@Commit
	void testAddPet_hasAutoGeneratedId() {
		PetDTO dto = new PetDTO();
		Pet pet = null;

		dto.setPet_age(1);
		dto.setPet_name("pet_name");
		dto.setPet_breed("pet_breed");
		dto.setPet_species("pet_species");
		dto.setPet_description("pet_description");
		dto.setPet_image(Base64Conversion.base64toByteArray(blobString));

		// fk types
		dto.setPet_type("real");

		pet = petRepo.createPet(dto);

		assertNotEquals(pet.getPet_id(), 0);

		// check auto generated unadopted status
		assertEquals(pet.getPet_status().getPet_status(), "unadopted");

		// check auto generated timestamp if it exists
		assertNotNull(pet.getPet_list_date());

		// save created date for checking later
		created = pet.getPet_list_date();
	}

	@Test
	@Transactional
	@Order(2)
	void testGetPet_thatExists() throws NotFoundException {
		Pet pet = petRepo.getPetById(1);

		assertNotNull(pet);
	}

	@Test
	@Transactional
	@Order(3)
	void testGetPet_thatDoesNotExists() throws NotFoundException {
		// should throw error if pet does not exist
		Assertions.assertThrows(NotFoundException.class, () -> {
			petRepo.getPetById(Integer.MAX_VALUE);
		});
	}

	@Test
	@Transactional
	@Order(4)
	@Commit
	void testUpdatePetWithId_noImageUpdate() throws NotFoundException, UpdateException {
		PetDTO dto = new PetDTO();

		// we omit picture blob for this test
		dto.setPet_age(10);
		dto.setPet_name("new pet_name");
		dto.setPet_breed("new pet_breed");
		dto.setPet_species("new pet_species");
		dto.setPet_description("new pet_description");

		Pet pet = petRepo.updatePetById(1, dto);

		// update assertions
		assertTrue(pet.getPet_age() == 10);
		assertTrue(pet.getPet_name().equals("new pet_name"));
		assertTrue(pet.getPet_breed().equals("new pet_breed"));
		assertTrue(pet.getPet_species().equals("new pet_species"));
		assertTrue(pet.getPet_description().equals("new pet_description"));

		// make sure created date remains immutable
		assertEquals(created, pet.getPet_list_date());
	}

	@Test
	@Transactional
	@Order(5)
	@Commit
	void testUpdatePetWithId_WithImageUpdate() throws NotFoundException, UpdateException {
		PetDTO dto = new PetDTO();

		String dummyImage = "dummy_image";

		// we omit picture blob for this test
		dto.setPet_age(11);
		dto.setPet_name("newer pet_name");
		dto.setPet_breed("newer pet_breed");
		dto.setPet_species("newer pet_species");
		dto.setPet_description("newer pet_description");
		dto.setPet_image(dummyImage.getBytes());

		Pet pet = petRepo.updatePetById(1, dto);

		// update assertions
		assertEquals(pet.getPet_age(), 11);
		assertEquals(pet.getPet_name(), "newer pet_name");
		assertEquals(pet.getPet_breed(), "newer pet_breed");
		assertEquals(pet.getPet_species(), "newer pet_species");
		assertEquals(pet.getPet_description(), "newer pet_description");
		assertArrayEquals(pet.getPet_image(), dummyImage.getBytes());

		// make sure created date remains immutable
		assertEquals(created, pet.getPet_list_date());
	}

	@Test
	@Transactional
	@Order(6)
	@Commit
	void testUpdatePetDoesNotExist() throws NotFoundException, UpdateException {
		PetDTO dto = new PetDTO();
		// should throw error if trying to delete something that does not exist
		Assertions.assertThrows(UpdateException.class, () -> {
			petRepo.updatePetById(Integer.MAX_VALUE, dto);
		});
	}

	// TEST CREATING A NEW DIGITAL PET
	@Test
	@Transactional
	@Order(7)
	@Commit
	void testAddDigitalPet_hasAutoGeneratedId() {
		PetDTO dto = new PetDTO();
		Pet pet = null;

		dto.setPet_age(1);
		dto.setPet_name("digital pet_name");
		dto.setPet_breed("digital pet_breed");
		dto.setPet_species("digital pet_species");
		dto.setPet_description("digital pet_description");
		dto.setPet_image(Base64Conversion.base64toByteArray(blobString));

		// fk types
		dto.setPet_type("digital");

		pet = petRepo.createPet(dto);

		assertNotEquals(pet.getPet_id(), 0);

		// check auto generated unadopted status
		assertEquals(pet.getPet_status().getPet_status(), "unadopted");

		// check auto generated timestamp if it exists
		assertNotNull(pet.getPet_list_date());
	}
	
	@Test
	@Transactional
	@Order(8)
	void getPetListWithPets () throws NotFoundException {
		List<Pet> petList = petRepo.getAllPets();
		//pet list should have at least something in it
		assertNotEquals(petList.size(), 0);
	}

	@Test
	@Transactional
	@Order(100)
	@Commit
	void testDeletePetById() throws NotFoundException, UpdateException {
		boolean result = petRepo.deletePetById(1);
		assertTrue(result);
		// Make sure pet does not exist in database
		Assertions.assertThrows(NotFoundException.class, () -> {
			petRepo.getPetById(1);
		});
	}

	@Test
	@Transactional
	@Order(101)
	void testDeletePet_petDoesNotExist() throws NotFoundException, UpdateException {
		// should throw error if trying to delete something that does not exist
		Assertions.assertThrows(UpdateException.class, () -> {
			petRepo.deletePetById(Integer.MAX_VALUE);
		});
	}

}
